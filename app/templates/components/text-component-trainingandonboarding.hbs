<div class="text-component">
  <div class="component-info" {{action "expandComponent"}}>
    <div class="component-title">
      <span>Training and Onboarding</span>
    </div>
    <div class="component-overview">
      <div class="current-state">
        <span>Current State:</span>
        <ul>
          <li>
            No standard architecture – every different project is structured differently and each design decision needs to be debated and discussed
          </li>
          <li>
            Takes significant time for developers to learn a project’s structure and design
          </li>
          <li>
            Developers are “stuck” in their team and project – changing teams would require a major context shift
          </li>
          <li>
            Training may be widely different depending on the instructor’s individual opinion of best practice
          </li>
          <li>
            Consultants need time to immerse themselves in the project and be brought up to date about design decisions before they can be productive
          </li>
        </ul>
      </div>
      <div class="ember-state">
        <span>The Ember Advantage:</span>
        <ul>
          <li>
            Ember offers a standard architecture for building PWAs with the concept of “Convention over Configuration”
          </li>
          <li>
            Each Ember app is very similar in structure even when built by different teams or companies
          </li>
          <li>
            Ember developers can be productive in days – they don’t need to learn the intricacies of each application’s structure
          </li>
          <li>
            Developers can easily move between projects and teams
          </li>
          <li>
            Training is highly effective and efficient – teaches a community-wide standard for coding
          </li>
          <li>
            Community of consultants can be productive right away because they are familiar with Ember’s consistent structure
          </li>
        </ul>
      </div>
    </div>
    <div class="component-expanded">
      {{#unless isExpanded}}
        <div class="component-expand">
          <img class="expand-chevron" src="images/icon-chevron.svg" />
        </div>
      {{/unless}}
      {{#liquid-if isExpanded}}
        <p>
          In an enterprise environment a new technology must be considered on the basis of how it will affect the entire organization, from the individual, to each team, and the organization as a whole. Ease of use becomes extremely important in this decision. That is, how quickly new team members can get up to speed on a project and also how smooth the transition is when someone like a key developer leaves a team or project.
        </p>
        <p>
          In current practice, frameworks provide the foundation for application development, leaving the rest up to the developer and his/her individual style. This is a major risk in an enterprise organization because many teams of developers contribute to a variety of projects. If there is no consistency between individual styles, then there can be no consistency in the overall project. These development styles will have to be carefully considered at each step of the development process and every time a new developer is brought on, he/she has to be brought up to speed about every single one of those decisions as they will all be unique to that specific project.
        </p>
        <p>
          The snowballing effect of this ongoing process is poignant. Two different applications that accomplish the same task could be completely unrecognizable from the one another because the framework is open to personal interpretation and design. For example, many functions that do not come with certain frameworks out of the box can be solved using third party technologies, but then the decision has to be made about which other technology to use. These meetings have to take place for every function or feature as there are infinitely many ways to go about them. This leads to an inexplicably significant amount of time wasted in meetings discussing design and strategy decisions that are, put simply, trivial choices, but have to be discussed and agreed upon to move forward.
        </p>
        <p>
          Trivial choices are already made for the developer when applying “Convention over Configuration,” a design paradigm that offers a standard architecture for building PWAs popularized by the Ruby on Rails framework, and one of the founding principles of the Ember.js framework. Convention over configuration decreases the number of decisions that developers need to make in a project, gaining simplicity and uniformity at the code level while still allowing for development flexibility and creativity. In the case that the convention does not meet the requirements of a project, Ember also provides methods for modifying convention to fit specific needs.
        </p>
        <p>
          Applying Convention over Configuration leads different developers to build applications in very similar ways, which makes Ember apps very similar in structure even when they are built by different teams or companies. Bringing new team members or even new teams on board then becomes a seamless process as developers can look at a completely unfamiliar code base and know exactly where to look to understand what is being built, instead of the ongoing process of having to discuss each design decision made at each step in the project. The same benefits apply to Ember consultants. There is a healthy community of worldwide consultants who can help you get started or augment your existing teams. Their familiarity with Ember’s consistent structure allows them to be productive right away.
        </p>
        <p>
          For a project that is hundreds of thousands of lines of code, this could be the difference between new developers becoming productive in days instead of weeks. As an added bonus, Ember has also removed a lot of the boiler plate and menial typing for the developer, which is especially beneficial for large enterprise projects where saving a few minutes here and there can add up over the lifetime of a project and makes developers happy.
        </p>
        <p>
          Convention over Configuration leads the Ember framework to be considered highly opinionated – Ember uses a shared opinion of how to build software with the conventions of the system that are successfully and rigorously tested in real-world applications and are consistent between projects. It also means that training is as effective as possible, and teaches a community-wide standard for coding, not just the trainer’s individual opinion. When a developer is trained with the Ember framework, that training has a global scope. That developer is now supremely flexible and can easily move between teams and projects using the Ember framework.
        </p>
        <p>
          Strong documentation is the key to training new developers and Ember is one of the most well documented frameworks available. The Ember team is committed to delivering high quality documentation with tutorials and examples, which are up to date with the latest changes in the framework. Furthermore, with Ember it is much easier to find examples and tutorials that actually relate to a developer’s code as Ember applications are built in similar ways.
        </p>
        <p>
          While trendy development technologies may be what developers are asking for, those developers are not considering the effect of those technologies on the enterprise as a whole. The right framework must be sustainable and able to withstand the revolving door of developers entering and leaving an organization without leaving that organization to fall back into the vicious cycle of “rewrite culture.” Other frameworks may be the technology of the moment, Ember is the tried and true survivor of the trendy technology life cycle.
        </p>
        <p>
          Convention over Configuration does away with the endless meetings and debates. A strongly opinionated framework makes your application have a global scope. When it comes to the best framework to for establishing the most efficient training and onboarding process, Ember is the clear winner.
        </p>
        <div class="component-contract">
          <img class="expand-chevron" src="images/icon-chevron.svg" />
        </div>
      {{/liquid-if}}
    </div>
  </div>
  <div class="component-graphic">
    <img class="graphic" src="images/icon-peoplecycle.svg"/>
  </div>
</div>
